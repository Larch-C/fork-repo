name: Fork / Sync All AstrBot Plugins

on:
  workflow_dispatch:          # 手动触发
    inputs:
      dry_run:
        description: '试运行模式（仅显示操作，不实际执行）'
        required: false
        default: false
        type: boolean
      force_sync:
        description: '强制同步所有已fork的仓库'
        required: false
        default: false
        type: boolean
  schedule:                   # 每小时 UTC 自动同步
    - cron: "0 * * * *"

env:
  PLUGIN_JSON_URL: "https://raw.githubusercontent.com/AstrBotDevs/AstrBot_Plugins_Collection/main/plugins.json"

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.list.outputs.repos }}
      total_count: ${{ steps.list.outputs.total_count }}
    steps:
      - name: Fetch plugins.json
        run: |
          echo "📥 正在获取 plugins.json..."
          curl -fsSL "$PLUGIN_JSON_URL" -o plugins.json
          echo "✅ plugins.json 获取完成"
          
      - name: Parse repo list
        id: list
        run: |
          echo "📋 正在解析仓库列表..."
          
          # 提取所有仓库URL并清理格式
          repos=$(jq -r '
            to_entries[] | 
            select(.value.repo != null) | 
            .value.repo
          ' plugins.json | \
          sed 's|git@github.com:|https://github.com/|' | \
          sed 's|\.git$||' | \
          sed 's|/tree/.*||' | \
          sed 's|/blob/.*||' | \
          grep -E '^https://github\.com/[^/]+/[^/]+$' | \
          sort -u)
          
          # 转换为JSON数组格式
          repo_array=$(echo "$repos" | jq -R -s -c 'split("\n") | map(select(. != ""))')
          total_count=$(echo "$repos" | wc -l)
          
          echo "repos=$repo_array" >> $GITHUB_OUTPUT
          echo "total_count=$total_count" >> $GITHUB_OUTPUT
          
          echo "📊 找到 $total_count 个有效的GitHub仓库："
          echo "$repos" | head -10
          if [ $total_count -gt 10 ]; then
            echo "... 和其他 $((total_count - 10)) 个仓库"
          fi

  create-batches:
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.total_count > 0
    outputs:
      batches: ${{ steps.batch.outputs.batches }}
      batch_count: ${{ steps.batch.outputs.batch_count }}
    steps:
      - name: Create batches
        id: batch
        run: |
          echo "📦 正在创建批次..."
          
          # 读取仓库列表
          repos='${{ needs.prepare.outputs.repos }}'
          total_count=${{ needs.prepare.outputs.total_count }}
          
          # 每批处理50个仓库（留一些余量）
          batch_size=50
          batch_count=$(( (total_count + batch_size - 1) / batch_size ))
          
          echo "总仓库数: $total_count"
          echo "批次大小: $batch_size"
          echo "批次数量: $batch_count"
          
          # 创建批次数组
          batches="["
          for i in $(seq 0 $((batch_count - 1))); do
            start_idx=$((i * batch_size))
            end_idx=$(((i + 1) * batch_size))
            
            # 使用jq提取当前批次的仓库
            batch_repos=$(echo "$repos" | jq -c ".[$start_idx:$end_idx]")
            
            if [ $i -gt 0 ]; then
              batches="$batches,"
            fi
            batches="$batches{\"batch_id\":$i,\"repos\":$batch_repos}"
          done
          batches="$batches]"
          
          echo "batches=$batches" >> $GITHUB_OUTPUT
          echo "batch_count=$batch_count" >> $GITHUB_OUTPUT
          
          echo "✅ 创建了 $batch_count 个批次"

  fork-sync:
    runs-on: ubuntu-latest
    needs: [prepare, create-batches]
    if: needs.create-batches.outputs.batch_count > 0
    strategy:
      max-parallel: 3           # 降低并发批次数
      fail-fast: false         # 某个批次失败不影响其他批次
      matrix:
        batch: ${{ fromJson(needs.create-batches.outputs.batches) }}

    steps:
      - name: Setup environment
        run: |
          echo "BATCH_ID=${{ matrix.batch.batch_id }}" >> $GITHUB_ENV
          echo "📦 处理批次 ${{ matrix.batch.batch_id }}"
          
      - name: Setup GH CLI
        run: |
          # 检查是否有GH_PAT，如果没有则提示用户
          if [ -z "${{ secrets.GH_PAT }}" ]; then
            echo "❌ 错误: 未找到 GH_PAT secret"
            echo "请按照以下步骤设置Personal Access Token:"
            echo "1. 访问 GitHub Settings → Developer settings → Personal access tokens"
            echo "2. 创建新token，需要 repo 和 workflow 权限"
            echo "3. 在仓库设置中添加名为 GH_PAT 的secret"
            exit 1
          fi
          echo "${{ secrets.GH_PAT }}" | gh auth login --with-token
          
      - name: Verify authentication
        run: |
          echo "🔐 验证GitHub认证..."
          gh auth status
          echo "✅ 认证成功"
          
      - name: Batch delay (Rate limiting protection)
        if: ${{ matrix.batch.batch_id != 0 }}
        run: |
          # 每个批次之间延迟，避免rate limit
          delay_seconds=$(( ${{ matrix.batch.batch_id }} * 10 ))
          echo "⏱️  批次 ${{ matrix.batch.batch_id }} 延迟 ${delay_seconds} 秒..."
          sleep $delay_seconds
          
      - name: Process batch repositories
        run: |
          echo "🔄 开始处理批次 ${{ matrix.batch.batch_id }} 的仓库..."
          
          # 创建结果目录
          mkdir -p results
          
          # 处理当前批次的所有仓库
          repos='${{ toJson(matrix.batch.repos) }}'
          echo "$repos" | jq -r '.[]' | while read -r repo_url; do
            echo "📦 处理仓库: $repo_url"
            
            # 提取仓库信息
            owner_repo=${repo_url#*github.com/}
            owner_repo=${owner_repo%/}
            owner=$(echo "$owner_repo" | cut -d/ -f1)
            repo=$(echo "$owner_repo" | cut -d/ -f2)
            
            # 检查原始仓库是否存在
            if ! gh repo view "$owner_repo" --json name >/dev/null 2>&1; then
              echo "❌ 原始仓库不存在: $owner_repo"
              
              # 保存结果
              jq -n \
                --arg repo "$owner_repo" \
                --arg owner "$owner" \
                --arg repo_name "$repo" \
                --arg status "not_found" \
                --arg message "原始仓库不存在或无法访问" \
                --arg my_fork "unknown/$repo" \
                --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
                '{
                  repo: $repo,
                  owner: $owner,
                  repo_name: $repo_name,
                  status: $status,
                  message: $message,
                  my_fork: $my_fork,
                  timestamp: $timestamp
                }' > "results/${owner}_${repo}.json"
              
              continue
            fi
            
            echo "✅ 原始仓库存在: $owner_repo"
            
            # 获取当前用户信息
            my_login=$(gh api user --jq .login)
            my_fork="${my_login}/$repo"
            
            # 增强的fork状态检查
            fork_exists=false
            fork_status="unknown"
            
            # 检查我的fork是否存在
            if gh repo view "$my_fork" --json name,parent,isFork,nameWithOwner >/dev/null 2>&1; then
              # 获取详细的仓库信息
              repo_info=$(gh repo view "$my_fork" --json name,parent,isFork,nameWithOwner)
              is_fork=$(echo "$repo_info" | jq -r '.isFork // false')
              parent_name=$(echo "$repo_info" | jq -r '.parent.nameWithOwner // empty')
              
              echo "🔍 检查fork状态: is_fork=$is_fork, parent=$parent_name"
              
              if [ "$is_fork" = "true" ]; then
                if [ -n "$parent_name" ] && [ "$parent_name" = "$owner_repo" ]; then
                  # 完美匹配的fork
                  fork_exists=true
                  fork_status="valid_fork"
                  echo "✅ 已fork且parent匹配: $my_fork <- $owner_repo"
                elif [ -n "$parent_name" ]; then
                  # fork但parent不匹配
                  fork_exists=false
                  fork_status="wrong_parent"
                  echo "⚠️  已fork但parent不匹配: $my_fork (parent: $parent_name, expected: $owner_repo)"
                else
                  # fork但没有parent信息，尝试通过API获取更多信息
                  echo "🔍 Fork无parent信息，尝试API检查..."
                  
                  # 使用GitHub API获取更详细信息
                  api_info=$(gh api repos/"$my_fork" --jq '{fork: .fork, parent: .parent.full_name}' 2>/dev/null || echo '{}')
                  api_parent=$(echo "$api_info" | jq -r '.parent // empty')
                  
                  if [ -n "$api_parent" ] && [ "$api_parent" = "$owner_repo" ]; then
                    fork_exists=true
                    fork_status="valid_fork_api"
                    echo "✅ API确认为正确的fork: $my_fork <- $api_parent"
                  else
                    # 最后尝试：直接测试同步是否可行
                    echo "🧪 测试同步兼容性..."
                    if gh repo sync "$my_fork" --source "$owner_repo" --dry-run 2>/dev/null; then
                      fork_exists=true
                      fork_status="valid_fork_sync_test"
                      echo "✅ 同步测试通过，确认为有效fork"
                    else
                      fork_exists=false
                      fork_status="invalid_fork"
                      echo "❌ 同步测试失败，可能不是正确的fork"
                    fi
                  fi
                fi
              else
                # 不是fork，是同名的独立仓库
                fork_exists=false
                fork_status="independent_repo"
                echo "⚠️  仓库 $my_fork 存在但不是fork (独立仓库)"
              fi
            else
              # fork不存在
              fork_exists=false
              fork_status="not_exists"
              echo "🆕 尚未fork: $owner_repo"
            fi
            
            # 根据情况执行操作
            if [ "${{ inputs.dry_run }}" = "true" ]; then
              # 试运行模式
              if [ "$fork_exists" = "false" ]; then
                if [ "$fork_status" = "wrong_parent" ] || [ "$fork_status" = "independent_repo" ]; then
                  status="conflict_detected"
                  message="检测到同名仓库冲突，需要手动处理"
                else
                  status="will_fork"
                  message="将会fork"
                fi
              else
                status="will_sync"
                message="已fork，需要时会同步"
              fi
            elif [ "$fork_exists" = "false" ]; then
              # 需要fork
              if [ "$fork_status" = "wrong_parent" ] || [ "$fork_status" = "independent_repo" ]; then
                # 存在冲突，跳过
                echo "⚠️  跳过fork，存在同名仓库: $my_fork"
                status="skipped_conflict"
                message="跳过：存在同名仓库冲突"
              else
                # 正常fork
                echo "🍴 正在fork: $owner_repo"
                
                # 捕获fork命令的输出和错误
                fork_output=$(gh repo fork "$owner_repo" --clone=false 2>&1)
                fork_exit_code=$?
                
                if [ $fork_exit_code -eq 0 ]; then
                  echo "✅ Fork成功: $owner_repo"
                  status="forked"
                  message="新fork成功"
                else
                  # 检查是否是"already exists"错误
                  if echo "$fork_output" | grep -q "already exists"; then
                    echo "ℹ️  Fork已存在，检查状态: $my_fork"
                    # 重新检查fork状态
                    if gh repo view "$my_fork" --json isFork,parent >/dev/null 2>&1; then
                      updated_info=$(gh repo view "$my_fork" --json isFork,parent)
                      updated_is_fork=$(echo "$updated_info" | jq -r '.isFork // false')
                      updated_parent=$(echo "$updated_info" | jq -r '.parent.nameWithOwner // empty')
                      
                      if [ "$updated_is_fork" = "true" ] && [ "$updated_parent" = "$owner_repo" ]; then
                        status="already_forked"
                        message="Fork已存在"
                        fork_exists=true
                      else
                        status="fork_conflict"
                        message="Fork冲突：已存在同名仓库"
                      fi
                    else
                      status="fork_conflict"
                      message="Fork冲突：无法确认状态"
                    fi
                  else
                    echo "❌ Fork失败: $owner_repo"
                    echo "错误输出: $fork_output"
                    status="fork_failed"
                    message="Fork失败: $(echo "$fork_output" | head -1)"
                  fi
                fi
              fi
            else
              # 已fork，执行同步
              echo "🔄 正在同步fork: $my_fork"
              
              sync_needed=false
              if [ "${{ inputs.force_sync }}" = "true" ] || [ "${{ github.event_name }}" = "schedule" ]; then
                sync_needed=true
                echo "🔄 强制同步模式"
              fi
              
              if [ "$sync_needed" = "true" ]; then
                # 执行同步
                sync_output=$(gh repo sync "$my_fork" --source "$owner_repo" 2>&1)
                sync_exit_code=$?
                
                if [ $sync_exit_code -eq 0 ]; then
                  echo "✅ 同步成功: $my_fork"
                  status="synced"
                  message="同步成功"
                else
                  # 检查同步失败的原因
                  if echo "$sync_output" | grep -q "up to date\|already up-to-date"; then
                    echo "ℹ️  已是最新: $my_fork"
                    status="up_to_date"
                    message="已是最新版本"
                  else
                    echo "⚠️  同步失败: $my_fork"
                    echo "错误输出: $sync_output"
                    status="sync_failed"
                    message="同步失败: $(echo "$sync_output" | head -1)"
                  fi
                fi
              else
                # 非强制模式，检查是否需要同步
                echo "🔍 检查是否需要同步..."
                if gh repo sync "$my_fork" --source "$owner_repo" 2>/dev/null; then
                  echo "✅ 同步成功: $my_fork"
                  status="synced"
                  message="自动同步成功"
                else
                  echo "ℹ️  无需同步: $my_fork"
                  status="up_to_date"
                  message="已是最新或无需同步"
                fi
              fi
            fi
            
            # 保存结果
            jq -n \
              --arg repo "$owner_repo" \
              --arg owner "$owner" \
              --arg repo_name "$repo" \
              --arg status "$status" \
              --arg message "$message" \
              --arg my_fork "$my_fork" \
              --arg fork_status "$fork_status" \
              --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              '{
                repo: $repo,
                owner: $owner,
                repo_name: $repo_name,
                status: $status,
                message: $message,
                my_fork: $my_fork,
                fork_status: $fork_status,
                timestamp: $timestamp
              }' > "results/${owner}_${repo}.json"
            
            # 防止rate limit - 每个仓库之间短暂延迟
            sleep 3
          done
          
          echo "✅ 批次 ${{ matrix.batch.batch_id }} 处理完成"
          
      - name: Upload batch results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: batch-results-${{ matrix.batch.batch_id }}
          path: results/
          retention-days: 7

  collect-results:
    runs-on: ubuntu-latest
    needs: [prepare, create-batches, fork-sync]
    if: always() && needs.prepare.outputs.total_count > 0
    steps:
      - name: Download all batch results
        uses: actions/download-artifact@v4
        with:
          pattern: batch-results-*
          path: all-results/
          merge-multiple: true

      - name: Generate results table
        run: |
          echo "📊 正在生成结果表格..."
          
          # 创建结果汇总
          echo "# 🎯 AstrBot插件Fork/Sync结果报告" > results_summary.md
          echo "" >> results_summary.md
          echo "**操作时间:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> results_summary.md
          echo "**操作模式:** ${{ inputs.dry_run && '🔍 试运行' || '▶️ 实际执行' }}" >> results_summary.md
          echo "**总仓库数:** ${{ needs.prepare.outputs.total_count }}" >> results_summary.md
          echo "" >> results_summary.md
          
          # 统计各种状态
          total=0
          forked=0
          synced=0
          up_to_date=0
          already_forked=0
          failed=0
          not_found=0
          conflicts=0
          
          # 创建表格头
          echo "## 📋 详细结果" >> results_summary.md
          echo "" >> results_summary.md
          echo "| 仓库 | 状态 | 我的Fork | 说明 | Fork状态 | 时间 |" >> results_summary.md
          echo "|------|------|----------|------|----------|------|" >> results_summary.md
          
          # 处理所有结果文件
          if [ -d "all-results" ]; then
            for file in all-results/*.json; do
              if [ -f "$file" ]; then
                total=$((total + 1))
                
                # 提取数据
                repo=$(jq -r '.repo' "$file")
                status=$(jq -r '.status' "$file")
                message=$(jq -r '.message' "$file")
                my_fork=$(jq -r '.my_fork' "$file")
                fork_status=$(jq -r '.fork_status // "unknown"' "$file")
                timestamp=$(jq -r '.timestamp' "$file")
                
                # 格式化时间
                formatted_time=$(date -d "$timestamp" '+%H:%M' 2>/dev/null || echo "N/A")
                
                # 状态图标和统计
                case "$status" in
                  "forked")
                    icon="🍴"
                    forked=$((forked + 1))
                    ;;
                  "synced")
                    icon="🔄"
                    synced=$((synced + 1))
                    ;;
                  "sync_attempted")
                    icon="🔄"
                    synced=$((synced + 1))
                    ;;
                  "up_to_date")
                    icon="✅"
                    up_to_date=$((up_to_date + 1))
                    ;;
                  "already_forked")
                    icon="📁"
                    already_forked=$((already_forked + 1))
                    ;;
                  "fork_failed"|"sync_failed")
                    icon="❌"
                    failed=$((failed + 1))
                    ;;
                  "not_found")
                    icon="🚫"
                    not_found=$((not_found + 1))
                    ;;
                  "skipped_conflict"|"fork_conflict"|"conflict_detected")
                    icon="⚠️"
                    conflicts=$((conflicts + 1))
                    ;;
                  "will_fork")
                    icon="🔮"
                    ;;
                  "will_sync")
                    icon="🔮"
                    ;;
                  *)
                    icon="❓"
                    ;;
                esac
                
                # 格式化fork状态
                case "$fork_status" in
                  "valid_fork") fork_status_display="✅ 有效" ;;
                  "wrong_parent") fork_status_display="⚠️ 错误父级" ;;
                  "independent_repo") fork_status_display="🏠 独立仓库" ;;
                  "not_exists") fork_status_display="❌ 不存在" ;;
                  "invalid_fork") fork_status_display="❌ 无效fork" ;;
                  *) fork_status_display="❓ 未知" ;;
                esac
                
                # 添加到表格
                echo "| [\`$repo\`](https://github.com/$repo) | $icon $message | [\`$my_fork\`](https://github.com/$my_fork) | $message | $fork_status_display | $formatted_time |" >> results_summary.md
              fi
            done
          fi
          
          # 添加统计摘要
          echo "" >> results_summary.md
          echo "## 📊 统计摘要" >> results_summary.md
          echo "" >> results_summary.md
          echo "| 状态 | 数量 | 百分比 |" >> results_summary.md
          echo "|------|------|--------|" >> results_summary.md
          
          if [ $total -gt 0 ]; then
            [ $forked -gt 0 ] && echo "| 🍴 新fork成功 | $forked | $(( forked * 100 / total ))% |" >> results_summary.md
            [ $synced -gt 0 ] && echo "| 🔄 同步成功 | $synced | $(( synced * 100 / total ))% |" >> results_summary.md
            [ $up_to_date -gt 0 ] && echo "| ✅ 已是最新 | $up_to_date | $(( up_to_date * 100 / total ))% |" >> results_summary.md
            [ $already_forked -gt 0 ] && echo "| 📁 已fork(未同步) | $already_forked | $(( already_forked * 100 / total ))% |" >> results_summary.md
            [ $conflicts -gt 0 ] && echo "| ⚠️ 冲突/跳过 | $conflicts | $(( conflicts * 100 / total ))% |" >> results_summary.md
            [ $failed -gt 0 ] && echo "| ❌ 失败 | $failed | $(( failed * 100 / total ))% |" >> results_summary.md
            [ $not_found -gt 0 ] && echo "| 🚫 仓库不存在 | $not_found | $(( not_found * 100 / total ))% |" >> results_summary.md
          fi
          
          echo "" >> results_summary.md
          echo "**总计:** $total 个仓库" >> results_summary.md
          
          # 添加建议
          echo "" >> results_summary.md
          echo "## 💡 建议" >> results_summary.md
          echo "" >> results_summary.md
          if [ $failed -gt 0 ]; then
            echo "- ⚠️  有 $failed 个仓库操作失败，建议检查权限或网络问题" >> results_summary.md
          fi
          if [ $conflicts -gt 0 ]; then
            echo "- ⚠️  有 $conflicts 个仓库存在冲突，需要手动处理同名仓库" >> results_summary.md
          fi
          if [ $not_found -gt 0 ]; then
            echo "- 🔍 有 $not_found 个仓库不存在，可能已被删除或移动" >> results_summary.md
          fi
          if [ $already_forked -gt 0 ]; then
            echo "- 🔄 有 $already_forked 个已fork仓库未同步，可使用'强制同步'选项更新" >> results_summary.md
          fi
          echo "- 📅 建议启用定期同步保持fork最新" >> results_summary.md
          echo "- 🧹 对于冲突的仓库，建议手动检查并重命名或删除" >> results_summary.md
          
          echo "✅ 结果表格生成完成"
          
      - name: Upload results summary
        uses: actions/upload-artifact@v4
        with:
          name: fork-sync-results
          path: results_summary.md
          retention-days: 30

      - name: Display results in step summary
        run: |
          echo "📊 正在添加结果到步骤摘要..."
          cat results_summary.md >> $GITHUB_STEP_SUMMARY

  summary:
    runs-on: ubuntu-latest
    needs: [prepare, create-batches, fork-sync, collect-results]
    if: always()
    steps:
      - name: Final summary
        run: |
          echo "# 🎯 AstrBot插件Fork/Sync操作完成" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **基本信息:**" >> $GITHUB_STEP_SUMMARY
          echo "- 总仓库数: ${{ needs.prepare.outputs.total_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- 批次数量: ${{ needs.create-batches.outputs.batch_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- 操作模式: ${{ inputs.dry_run && '🔍 试运行' || '▶️ 实际执行' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 强制同步: ${{ inputs.force_sync && '✅ 是' || '❌ 否' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.collect-results.result }}" = "success" ]; then
            echo "✅ **详细结果表格已生成！**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📋 请查看上方的 \`collect-results\` 步骤获取完整的结果表格。" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "💾 **结果文件:**" >> $GITHUB_STEP_SUMMARY
            echo "- 可在 Artifacts 中下载 \`fork-sync-results\` 文件查看详细报告" >> $GITHUB_STEP_SUMMARY
            echo "- 包含所有仓库的fork状态、链接和时间戳" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️  **结果收集失败**" >> $GITHUB_STEP_SUMMARY
            echo "- 操作状态: ${{ needs.fork-sync.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- 结果收集: ${{ needs.collect-results.result }